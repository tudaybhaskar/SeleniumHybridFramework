pipeline {
    agent any
    environment {
            PATH = "/opt/homebrew/Cellar/maven/3.9.6/bin:$PATH"
    }

    stages {
        stage('Run the tests') {
            steps {
                // Perform any build steps here
                // For example: Maven build, compile code, etc.
                script {
                    try {
                        sh 'mvn clean install'
                    } catch (Exception e) {
                         // Handle the failure (optional)
                         echo "Failed to run tests: ${e.message}"
                         // Mark the stage as failed
                         currentBuild.result = 'FAILURE'
                    }
                }
            }
        }

        stage('Verify Test Reports') {
            steps {
                script {
                    // Check if the surefire-reports directory exists
                    def surefireReportsDir = "${env.WORKSPACE}/target/surefire-reports"
                    def runnersDir = "${env.WORKSPACE}/src/test/resources/runners"
                    if (fileExists(surefireReportsDir)) {
                        // List the contents of the surefire-reports directory
                            sh "ls ${surefireReportsDir}"

                            // Check for specific XML files
                            def testngReportExists = fileExists("${surefireReportsDir}/testng-results.xml")
                            if (testngReportExists) {
                                echo "Test reports are available."
                            } else {
                                error "Test reports not found!"
                            }
                    } else {
                        error "Surefire reports directory not found!"
                    }
                    if (fileExists(runnersDir)) {
                        // List the contents of the surefire-reports directory
                        sh "ls ${runnersDir}"

                        // Check for specific XML files
                        def rerunXmlExists = fileExists("${runnersDir}/rerun_failed_1tests.xml")
                        if (rerunXmlExists) {
                            echo "Test XML: rerun_failed_1tests are available."
                        } else {
                            error "Test XML: rerun_failed_1tests not found!"
                        }
                    } else {
                        error "Surefire reports directory not found!"
                    }
                }
            }
        }
        stage('Check for Failed Tests') {
            steps {
                script {
                    // Initialize the count of failed tests
                    def failedTestsCount = 0

                    // Read the testng-results.xml file
                    def xmlContent = readFile('target/surefire-reports/testng-results.xml')
                    def xml = new XmlSlurper().parseText(xmlContent)

                    // Search for test-method elements with a status of FAILURE
                    def failedTests = xml.'**'.findAll { node ->
                        def nodeAsString = node.toString()
                        nodeAsString.contains('status=FAILURE')
                    }

                    // Count the number of failed tests
                    failedTestsCount = failedTests.size()

                    // Print the count of failed tests
                    echo "failedTestsCount: ${failedTestsCount}"

                    // Rerun the failed tests if any failures are found
                    if (failedTestsCount > 0) {
                        // Rerun the failed tests using the rerun_failed_tests.xml file
                        sh 'mvn test -DsuiteXmlFile=src/test/resources/runners/rerun_failed_1tests.xml'
                    } else {
                        echo 'No failed tests found. Skipping rerun.'
                    }
                }
            }
        }

        // Add more stages as needed
    }
    // Post-build actions, notifications, etc.
    post {
        // For example, send email notifications if the build fails
        failure {
            // Generate and serve Allure report
            allure([
                includeProperties: false,
                jdk: '',
                properties: [],
                reportBuildPolicy: 'ALWAYS',
                results: [[path: 'allure-results']]
            ])
        }
    }
}

def fileExists(String filePath) {
    def file = new File(filePath)
    return file.exists()
}
