pipeline {
    agent any
    environment {
            PATH = "/opt/homebrew/Cellar/maven/3.9.6/bin:$PATH"
    }

    stages {
        stage('Run the tests') {
            steps {
                // Perform any build steps here
                // For example: Maven build, compile code, etc.
                script {
                    try {
                        sh 'mvn clean install'
                    } catch (Exception e) {
                         // Handle the failure (optional)
                         echo "Failed to run tests: ${e.message}"
                         // Mark the stage as failed
                         currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
        stage('Check for Failed Tests') {
                    steps {
                        script {
                            // Check if there are any failed tests
                            def grepOutput = sh(
                                script: "grep -c 'FAILURE' target/surefire-reports/*.xml || true",
                                returnStdout: true
                            ).trim()

                            // Extract the numeric part from the grep output
                            def failedTestsCount = (grepOutput =~ /\d+/)[0]

                            if (failedTestsCount && failedTestsCount.isNumber()) {
                                if (failedTestsCount.toInteger() > 0) {
                                    // Rerun the failed tests using the rerun_failed_tests.xml file
                                    sh 'mvn test -Dsurefire.suiteXmlFiles=src/test/resources/runners/rerun_failed_1tests.xml'
                                } else {
                                        echo 'No failed tests found. Skipping rerun.'
                                }
                            } else {
                            echo 'Failed to determine the number of failed tests. Skipping rerun.'
                            }
                        }
                    }
                }
        // Add more stages as needed
    }
    // Post-build actions, notifications, etc.
    post {
        // For example, send email notifications if the build fails
        failure {
            // Generate and serve Allure report
            allure([
                includeProperties: false,
                jdk: '',
                properties: [],
                reportBuildPolicy: 'ALWAYS',
                results: [[path: 'allure-results']]
            ])
        }
    }
}

def fileExists(String filePath) {
    def file = new File(filePath)
    return file.exists()
}
